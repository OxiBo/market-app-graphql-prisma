# import UserOrderByInput, SellerOrderByInput, ReviewOrderByInput, ProductOrderByInput, OrderOrderByInput, ProductWhereUniqueInput from './generated/prisma.graphql'

# https://www.apollographql.com/docs/apollo-server/schema/unions-interfaces/
# https://grandstack.io/docs/graphql-interface-union-types/
union ResetPasswordResult = UserAuthPayLoad | SellerAuthPayLoad

type Query {
  users(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: UserOrderByInput
  ): [User!]!
  sellers(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: SellerOrderByInput
  ): [Seller!]!
  sellersConnection(where: SellerWhereInput): SellerConnection!
  products(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: ProductOrderByInput
  ): [Product!]!
  # the way it is done in wesboss course
  product(where: ProductWhereUniqueInput!): Product
  productsConnection(where: ProductWhereInput): ProductConnection!
  meUser: User!
  meSeller: Seller!
  seller(id: ID!): Seller!
  reviews(
    where: ReviewWhereInput
    productId: ID
    first: Int
    skip: Int
    after: String
    orderBy: ReviewOrderByInput
  ): [Review!]!
  reviewsConnection(productId: ID, where: ReviewWhereInput): ReviewConnection!
  myReviews: [Review!]!
  myOrders(
    query: String
    first: Int
    skip: Int
    after: String
    orderBy: OrderOrderByInput
  ): [Order!]!
  orderItems(query: String): [OrderItem!]!
  myOrdersItems(query: String): [OrderItem!]!
  orderItem(query: String): [OrderItem!]!
  myCurrentOrder: Order
}

type Mutation {
  createUser(data: CreateUserInput!): UserAuthPayLoad!
  loginUser(data: LoginUserInput!): UserAuthPayLoad!
  updateUser(data: UpdateUserInput!): User!
  deleteUser: User!
  createSeller(data: CreateSellerInput!): SellerAuthPayLoad!
  loginSeller(data: LoginSellerInput!): SellerAuthPayLoad!
  updateSeller(data: UpdateSellerInput!): Seller!
  deleteSeller: Seller!
  requestReset(email: String!, type: String!): SuccessMessage
  resetPassword(resetToken: String!, password: String, type: String!): ResetPasswordResult!
  createProduct(data: CreateProductInput!): Product!
  updateProduct(id: ID!, data: UpdateProductInput!): Product!
  deleteProduct(id: ID!): Product!
  createReview(data: CreateReviewInput!): Review!
  updateReview(id: ID!, data: UpdateReviewInput!): Review!
  deleteReview(id: ID!): Review!
  createOrder(data: [CreateOrderInput!]!): Order!
  deleteOrder(id: ID!): Order!
  createOrderItem(data: OrderItemInput!): OrderItem!
  removeItemFromOrder(id: ID!): OrderItem!
  addToOrder(id: ID!): OrderItem
}

type Subscription {
  product: ProductSubscriptionPayload!
  review: ReviewSubscriptionPayload!
  orderItem: OrderItemPayload!
  order: OrderPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  previousValues: ProductPreviousValues
}

type ProductPreviousValues {
  id: ID!
  # name: String!
  # department: String!
  # description: String!
  # count: Int
  # stock: Int!
  # price: Float!
  # rating: Float!
  # createdAt: DateTime!
  # updatedAt: DateTime!
}
type SuccessMessage {
  message: String
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
}

type OrderItemPayload {
  mutation: MutationType
  node: OrderItem
}
type OrderPayload {
  mutation: MutationType
  node: Order
}

enum UserType {
  BUYER
}

enum SellerType {
  SELLER
}

type User {
  id: ID!
  name: String!
  #  email will have to be changed this to nullable because email wont be returned to every query
  email: String
  password: String!
  age: Int
  image: String
  orders: [Order!]!
  reviews: [Review!]!
  type: UserType!
  orderItems: [OrderItem!]!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
  age: Int
  type: UserType!
  image: String
}

input LoginUserInput {
  email: String!
  password: String!
}

type UserAuthPayLoad {
  token: String!
  user: User!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
  age: Int
  image: String
}

type Seller {
  id: ID!
  name: String!
  #  ???? email will have to be changed this to nullable because email wont be returned to every query
  email: String
  password: String!
  products: [Product!]!
  image: String
  # orders: [Order!]!
  type: SellerType!
}

input CreateSellerInput {
  name: String!
  email: String!
  password: String!
  type: SellerType!
  image: String
}

input LoginSellerInput {
  email: String!
  password: String!
}

type SellerAuthPayLoad {
  token: String!
  seller: Seller!
}

input UpdateSellerInput {
  name: String
  email: String
  password: String
}

type Product {
  id: ID!
  name: String!
  department: String!
  description: String!
  image: String
  largeImage: String
  price: Float!
  count: Int
  rating: Float!
  stock: Int!
  seller: Seller!
  reviews: [Review!]!
  # TODO - need to work on this
  orders: [Order!]!
  orderItem: [OrderItem!]!
}

input CreateProductInput {
  name: String!
  department: String!
  description: String!
  image: String
  largeImage: String
  price: Float!
  # count: Int!
  rating: Float! = 0
  stock: Int!
  # https://stackoverflow.com/questions/51563960/how-to-add-default-values-to-input-arguments-in-graphql
  #   seller: ID!
}

input UpdateProductInput {
  name: String
  department: String
  image: String
  largeImage: String
  price: Float
  stock: Int
  desctiption: String
  # count: Int
}

type Order {
  id: ID!
  items: [OrderItem!]!
  started: Boolean!
  # finished: Boolean!
  total: Float
  user: User!
}

input CreateOrderInput {
  # products: [OrderItemInput!]!
  items: [ID!]
  started: Boolean!
  # products: [OrderItem!]!
  # products: [ID!]!
  # total: Float! will be calculated in mutation
  user: ID! 
}

type OrderItem {
  id: ID!
  product: Product
  # price: Float!
  count: Int!
  user: User!
  order: Order!
}

input OrderItemInput {
  product: ID!
  count: Int! = 1
  order: ID!
  user: ID!
}

type Review {
  id: ID!
  text: String!
  rating: Int!
  user: User!
  product: Product!
  published: Boolean!
}

input CreateReviewInput {
  text: String!
  rating: Int!
  product: ID!
  published: Boolean!
}
input UpdateReviewInput {
  text: String
  rating: Int
  published: Boolean
}
