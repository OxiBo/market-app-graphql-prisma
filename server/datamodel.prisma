type User {
    id: ID!@id
    name: String!
    email: String!@unique
    password: String!
    age: Int
    type: String!
    createdAt: DateTime!@createdAt
    updatedAt: DateTime!@updatedAt
    orders: [Order!]! @relation(name: "OrderToUser", onDelete: CASCADE)
    orderItems: [OrderItem!]!@relation(name: "OrderItemToUser", onDelete: SET_NULL)
    reviews: [Review!]!@relation(name: "ReviewToUser", onDelete: CASCADE)
}

type Seller {
    id: ID!@id
    name: String!@unique
    email: String!@unique
    password: String!
    type: String!
    createdAt: DateTime!@createdAt
    updatedAt: DateTime!@updatedAt
    products: [Product!]!@relation(name: "SellerToProduct", onDelete: CASCADE)
}

type Product {
  id: ID! @id
  name: String!
  department: String!
  count: Int
  stock: Int!
  price: Float!
  orderItem: [OrderItem!]@relation(name: "ProductToOrderItem", onDelete: SET_NULL)
  rating: Float!@default(value: 0)
  createdAt: DateTime!@createdAt
  updatedAt: DateTime!@updatedAt
  seller: Seller!@relation(name: "SellerToProduct", onDelete: SET_NULL)
  reviews: [Review!]!@relation(name: "ReviewToProduct", onDelete: CASCADE)
}

type Order {
  id: ID! @id
  items: [OrderItem!]!@relation(name: "OrderToItem", onDelete: CASCADE)
  total: Float!
  user: User! @relation(name: "OrderToUser", onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime!@updatedAt
}

type OrderItem {
  id: ID! @id
  product: Product!@relation(name: "ProductToOrderItem", onDelete: SET_NULL)
  count: Int!
  price: Float!
  user: User!@relation(name: "OrderItemToUser", onDelete: SET_NULL)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime!@updatedAt
}

type Review {
 id: ID! @id
 text: String!
 rating: Int!
 product: Product! @relation(name: "ReviewToProduct", onDelete: SET_NULL)
 user: User! @relation(name: "ReviewToUser", onDelete: SET_NULL)
 published: Boolean!
 createdAt: DateTime!@createdAt
 updatedAt: DateTime!@updatedAt
}